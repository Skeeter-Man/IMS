@inject IViewInventoriesByNameUseCases ViewInventoriesByNameUseCase

<div class="input-group">
    <input class="form-control"
           placeholder="Type inventory name here to search"
           @bind-value="this.searchFilter" @bind-value:event="oninput" />
    <button type="button" class="btn btn-success input-group-text" @onclick="HandleSearch">Search</button>
</div>

@if (inventories is not null && inventories.Count > 0)
{
    <div style="overflow-y:auto; max-height:300px; border: 1px solid silver; padding-top:5px">
        <ul style="list-style-type:none">
            @foreach (var inv in inventories)
            {
                <li @key="inv.InventoryId" style="cursor:pointer">
                    @inv.InventoryName
                </li>
            }
        </ul>
    </div>
}

@code {
    private string _searchFilter;
    private string searchFilter
    {
        get => _searchFilter;
        set
        {
            _searchFilter = value;
            HandleSearch();
        }
    }
    private List<Inventory> inventories = new();

    private async Task HandleSearch()
    {
        await Task.Delay(1000); // simulate long running call
        inventories = (await ViewInventoriesByNameUseCase.ExecuteAsyn(this.searchFilter)).ToList();

        StateHasChanged();
    }
}
