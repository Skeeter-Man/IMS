@page "/editproduct/{prodId:int}"

@attribute [Authorize(Policy = "Inventory")]

@rendermode InteractiveServer

@inject IViewProductByProductIdUseCase ViewProductByProductIdUseCase
@inject IEditProductUseCase EditProductUseCase
@inject NavigationManager NavigationManager

<h3>Edit Product</h3>
<br />

@if (this.product is not null)
{
    <EditForm Model="product" OnValidSubmit="Update">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <InputNumber @bind-Value="product.ProductId" hidden></InputNumber>

        <div class="form-group">
            <label for="name">Product Name</label>
            <InputText id="name"
                       @bind-Value="product.ProductName"
                       class="form-control">
            </InputText>
            <ValidationMessage For="() => product.ProductName" />
        </div>

        <div class="form-group">
            <label for="quantity">Quantity</label>
            <InputNumber id="name"
                         @bind-Value="product.Quantity"
                         class="form-control">
            </InputNumber>
            <ValidationMessage For="() => product.Quantity" />
        </div>

        <div class="form-group">
            <label for="price">Price</label>
            <InputNumber id="name"
                         @bind-Value="product.Price"
                         class="form-control">
            </InputNumber>
            <ValidationMessage For="() => product.Price" />
        </div>

        <div class="form-group">
            <label for="inventories">Inventories</label>
            <ProductsInventoriesComponent Product="this.product" />
        </div>

        <br />
        <button type="submit" class="btn btn-primary">Update</button>
        &nbsp;
        <a href="/products" class="btn btn-warning">Cancel</a>
    </EditForm>
}


@code {
    [Parameter]
    public int ProdId { get; set; }

    public Product? product { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        this.product ??= await ViewProductByProductIdUseCase.ExecuteAsync(this.ProdId);
    }

    private async Task Update()
    {
        if (product is not null)
        {
            await EditProductUseCase.ExecuteAsync(product);
            NavigationManager.NavigateTo("/products");
        }
    }
}
